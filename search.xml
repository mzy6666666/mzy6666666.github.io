<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>基于epoll的web服务器</title>
    <url>/2024/04/12/%E5%9F%BA%E4%BA%8Eepoll%E7%9A%84web%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="基于epoll的web服务器-C语言版本"><a href="#基于epoll的web服务器-C语言版本" class="headerlink" title="基于epoll的web服务器(C语言版本)"></a>基于epoll的web服务器(C语言版本)</h2><h3 id="1-初始化监听套接字"><a href="#1-初始化监听套接字" class="headerlink" title="1. 初始化监听套接字"></a>1. 初始化监听套接字</h3><p>包括创建监听套接字，设置端口复用，绑定，设置监听等步骤</p>
<h4 id="1-1-创建监听套接字（socket函数）"><a href="#1-1-创建监听套接字（socket函数）" class="headerlink" title="1.1 创建监听套接字（socket函数）"></a>1.1 创建监听套接字（socket函数）</h4><p><code>socket()</code>打开一个网络通讯端口，如果成功的话，就像<code>open()</code>一样返回一个文件描述符，应用程序可以像读写文件一样用<code>read/write</code>在网络上收发数据，如果<code>socket()</code>调用出错则返回<code>-1</code>。对于<code>IPv4</code>，<code>domain</code>参数指定为<code>AF_INET</code>。对于<code>TCP</code>协议，<code>type</code>参数指定为<code>SOCK_STREAM</code>，表示面向流的传输协议。如果是<code>UDP</code>协议，则<code>type</code>参数指定为<code>SOCK_DGRAM</code>，表示面向数据报的传输协议。<code>protocol</code>参数的介绍从略，指定为0即可。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt; /* See NOTES */</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">int socket(int domain, int type, int protocol);</span><br><span class="line">domain:</span><br><span class="line">	AF_INET 这是大多数用来产生socket的协议，使用TCP或UDP来传输，用IPv4的地址</span><br><span class="line">	AF_INET6 与上面类似，不过是来用IPv6的地址</span><br><span class="line">	AF_UNIX 本地协议，使用在Unix和Linux系统上，一般都是当客户端和服务器在同一台及其上的时候使用</span><br><span class="line">type:</span><br><span class="line">	SOCK_STREAM 这个协议是按照顺序的、可靠的、数据完整的基于字节流的连接。这是一个使用最多的socket类型，这个socket是使用TCP来进行传输。</span><br><span class="line">	SOCK_DGRAM 这个协议是无连接的、固定长度的传输调用。该协议是不可靠的，使用UDP来进行它的连接。</span><br><span class="line">	SOCK_SEQPACKET该协议是双线路的、可靠的连接，发送固定长度的数据包进行传输。必须把这个包完整的接受才能进行读取。</span><br><span class="line">	SOCK_RAW socket类型提供单一的网络访问，这个socket类型使用ICMP公共协议。（ping、traceroute使用该协议）</span><br><span class="line">	SOCK_RDM 这个类型是很少使用的，在大部分的操作系统上没有实现，它是提供给数据链路层使用，不保证数据包的顺序</span><br><span class="line">protocol:</span><br><span class="line">	传0 表示使用默认协议。</span><br><span class="line">返回值：</span><br><span class="line">	成功：返回指向新创建的socket的文件描述符，失败：返回-1，设置errno</span><br></pre></td></tr></table></figure>



<h4 id="1-2-设置端口复用（setsockopt函数）"><a href="#1-2-设置端口复用（setsockopt函数）" class="headerlink" title="1.2 设置端口复用（setsockopt函数）"></a>1.2 设置端口复用（setsockopt函数）</h4><p>在<code>server</code>的TCP连接没有完全断开之前不允许重新监听是不合理的。因为，TCP连接没有完全断开指的是<code>connfd</code>（127.0.0.1:6666）没有完全断开，而我们重新监听的是<code>listenfd</code>（0.0.0.0:6666），虽然是占用同一个端口，但<code>IP</code>地址不同，<code>connfd</code>对应的是与某个客户端通讯的一个具体的<code>IP</code>地址，而<code>listenfd</code>对应的是<code>wildcard address</code>。解决这个问题的方法是使用<code>setsockopt()</code>设置<code>socket</code>描述符的选项<code>SO_REUSEADDR</code>为1，表示允许创建端口号相同但<code>IP</code>地址不同的多个<code>socket</code>描述符。</p>
<p>在server代码的socket()和bind()调用之间插入如下代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> opt = <span class="number">1</span>;</span><br><span class="line">setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="keyword">sizeof</span>(opt));</span><br></pre></td></tr></table></figure>

<h4 id="1-3-绑定（bind函数）"><a href="#1-3-绑定（bind函数）" class="headerlink" title="1.3 绑定（bind函数）"></a>1.3 绑定（bind函数）</h4><p>服务器程序所监听的网络地址和端口号通常是固定不变的，客户端程序得知服务器程序的地址和端口号后就可以向服务器发起连接，因此服务器需要调用<code>bind</code>绑定一个固定的网络地址和端口号。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt; /* See NOTES */</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);</span><br><span class="line">sockfd：</span><br><span class="line">	socket文件描述符</span><br><span class="line">addr:</span><br><span class="line">	构造出IP地址加端口号</span><br><span class="line">addrlen:</span><br><span class="line">	sizeof(addr)长度</span><br><span class="line">返回值：</span><br><span class="line">	成功返回0，失败返回-1, 设置errno</span><br></pre></td></tr></table></figure>

<p><code>bind()</code>的作用是将参数<code>sockfd</code>和<code>addr</code>绑定在一起，使<code>sockfd</code>这个用于网络通讯的文件描述符监听<code>addr</code>所描述的地址和端口号。前面讲过，<code>struct sockaddr *</code>是一个通用指针类型，<code>addr</code>参数实际上可以接受多种协议的<code>sockaddr</code>结构体，而它们的长度各不相同，所以需要第三个参数<code>addrlen</code>指定结构体的长度。如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">bzero(&amp;addr, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">servaddr.sin_family = AF_INET;</span><br><span class="line">servaddr.sin_addr.s_addr = htonl(INADDR_ANY);	<span class="comment">//INADDR_ANY = 0</span></span><br><span class="line">servaddr.sin_port = htons(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure>

<p>首先将整个结构体清零，然后设置地址类型为<code>AF_INET</code>，<strong>网络地址为</strong><code>INADDR_ANY</code>**，这个宏表示本地的任意<code>IP</code><strong>地址</strong>，因为服务器可能有多个网卡，每个网卡也可能绑定多个<code>IP</code>地址，这样设置可以在所有的<code>IP</code>地址上监听，直到与某个客户端建立了连接时才确定下来到底用哪个<code>IP</code>地址，端口号为8888。</p>
<h4 id="1-4-设置监听-（listen函数）"><a href="#1-4-设置监听-（listen函数）" class="headerlink" title="1.4 设置监听 （listen函数）"></a>1.4 设置监听 （listen函数）</h4><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt; /* See NOTES */</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">int listen(int sockfd, int backlog);</span><br><span class="line">sockfd:</span><br><span class="line">	socket文件描述符</span><br><span class="line">backlog:</span><br><span class="line">	排队建立3次握手队列和刚刚建立3次握手队列的链接数和(现在只表示建立链接队列的数量)</span><br></pre></td></tr></table></figure>

<p>查看系统默认<code>backlog</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/sys/net/ipv4/tcp_max_syn_backlog</span><br></pre></td></tr></table></figure>

<p>典型的服务器程序可以同时服务于多个客户端，当有客户端发起连接时，服务器调用的<code>accept()</code>返回并接受这个连接，如果有大量的客户端发起连接而服务器来不及处理，尚未<code>accept</code>的客户端就处于连接等待状态，<code>listen()</code>声明<code>sockfd</code>处于监听状态，并且最多允许有<code>backlog</code>个客户端处于连接待状态，如果接收到更多的连接请求就忽略。<code>listen()</code>成功返回0，失败返回-1。</p>
<h4 id="1-5-初始化监听套接字（initListenFd函数）"><a href="#1-5-初始化监听套接字（initListenFd函数）" class="headerlink" title="1.5 初始化监听套接字（initListenFd函数）"></a>1.5 初始化监听套接字（initListenFd函数）</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化监听套接字</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">initListenFd</span><span class="params">(port)</span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建监听套接字</span></span><br><span class="line">    <span class="type">int</span> lfd = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(lfd == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;socket error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 设置端口复用</span></span><br><span class="line">    <span class="type">int</span> opt = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ret = setsockopt(lfd,SOL_SOCKET,SO_REUSEADDR,&amp;opt,<span class="keyword">sizeof</span>(opt));</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;setsockopt error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 绑定</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(port);</span><br><span class="line">    addr.sin_addr.s_addr = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ret = bind(lfd,(<span class="keyword">struct</span> sockaddr *)&amp;addr,<span class="keyword">sizeof</span>(addr));</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;bind error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.设置监听</span></span><br><span class="line">    ret = listen(lfd,<span class="number">128</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;listen error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5. 返回fd</span></span><br><span class="line">    <span class="keyword">return</span> lfd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-启动epoll"><a href="#2-启动epoll" class="headerlink" title="2. 启动epoll"></a>2. 启动epoll</h3><p><code>epoll</code>是<code>Linux</code>下<strong>IO多路复用</strong>接口<code>select/poll</code>的增强版本，它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率，因为它会复用文件描述符集合来传递结果而不用迫使开发者每次等待事件之前都必须重新准备要被侦听的文件描述符集合，另一点原因就是获取事件的时候，它无须遍历整个被侦听的描述符集，只要遍历那些被内核IO事件异步唤醒而加入<code>Ready</code>队列的描述符集合就行了。</p>
<p><code>epoll</code>除了提供<code>select/poll</code>那种IO事件的水平触发（Level Triggered）外，还提供了边沿触发（Edge Triggered），这就使得用户空间程序有可能缓存IO状态，减少<code>epoll_wait/epoll_pwait</code>的调用，提高应用程序效率。</p>
<h4 id="2-1-创建epoll树-epoll-create"><a href="#2-1-创建epoll树-epoll-create" class="headerlink" title="2.1 创建epoll树  (epoll_create)"></a>2.1 创建epoll树  (epoll_create)</h4><p> 创建一个<code>epoll</code>句柄，参数<code>size</code>用来告诉内核监听的文件描述符的个数，跟内存大小有关。(<strong>参数size已经弃用，只需提供大于0的数字就行</strong>)</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">#include &lt;sys/epoll.h&gt;</span><br><span class="line">int epoll_create(int size)		</span><br><span class="line">size：监听数目（内核参考值）</span><br><span class="line">返回值：成功：非负文件描述符；失败：-1，设置相应的errno</span><br></pre></td></tr></table></figure>

<p>可以使用cat命令查看一个进程可以打开的socket描述符上限。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/sys/fs/file-max</span><br><span class="line">806425</span><br></pre></td></tr></table></figure>

<p>如有需要，可以通过修改配置文件的方式修改该上限值。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/security/limits.conf</span><br><span class="line">在文件尾部写入以下配置,soft软限制，hard硬限制。如下图所示。</span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 100000</span><br></pre></td></tr></table></figure>

<p><img   src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20231026200903197.png"  alt="image-20231026200903197"></p>
<h4 id="2-2-上树（epoll-ctl函数）"><a href="#2-2-上树（epoll-ctl函数）" class="headerlink" title="2.2 上树（epoll_ctl函数）"></a>2.2 上树（epoll_ctl函数）</h4><p>控制某个<code>epoll</code>监控的文件描述符上的事件：注册、修改、删除。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">#include &lt;sys/epoll.h&gt;</span><br><span class="line">int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)</span><br><span class="line">    epfd：	为epoll_creat的句柄</span><br><span class="line">    op：		表示动作，用3个宏来表示：</span><br><span class="line">    EPOLL_CTL_ADD (注册新的fd到epfd)，</span><br><span class="line">    EPOLL_CTL_MOD (修改已经注册的fd的监听事件)，</span><br><span class="line">    EPOLL_CTL_DEL (从epfd删除一个fd)；</span><br><span class="line">    event：	告诉内核需要监听的事件</span><br><span class="line"></span><br><span class="line">struct epoll_event &#123;</span><br><span class="line">    __uint32_t events; /* Epoll events */</span><br><span class="line">    epoll_data_t data; /* User data variable */</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">typedef union epoll_data &#123;</span><br><span class="line">    void *ptr;</span><br><span class="line">    int fd;</span><br><span class="line">    uint32_t u32;</span><br><span class="line">    uint64_t u64;</span><br><span class="line">&#125; epoll_data_t;</span><br><span class="line"></span><br><span class="line">EPOLLIN ：	表示对应的文件描述符可以读（包括对端SOCKET正常关闭）</span><br><span class="line">EPOLLOUT：	表示对应的文件描述符可以写</span><br><span class="line">EPOLLPRI：	表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）</span><br><span class="line">EPOLLERR：	表示对应的文件描述符发生错误</span><br><span class="line">EPOLLHUP：	表示对应的文件描述符被挂断；</span><br><span class="line">EPOLLET： 	将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)而言的</span><br><span class="line">EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里</span><br><span class="line">返回值：成功：0；失败：-1，设置相应的errno</span><br></pre></td></tr></table></figure>

<h4 id="2-3-检测（epoll-wait函数）"><a href="#2-3-检测（epoll-wait函数）" class="headerlink" title="2.3 检测（epoll_wait函数）"></a>2.3 检测（epoll_wait函数）</h4><p>等待所监控文件描述符上有事件的产生，类似于<code>select()</code>调用。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">#include &lt;sys/epoll.h&gt;</span><br><span class="line">	int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout)</span><br><span class="line">    events：		用来存内核得到事件的集合，可简单看作数组。</span><br><span class="line">    maxevents：	告之内核这个events有多大，这个maxevents的值不能大于创建epoll_create()时的size，</span><br><span class="line">    timeout：	是超时时间</span><br><span class="line">    -1：	阻塞</span><br><span class="line">    0：	立即返回，非阻塞</span><br><span class="line">    &gt;0：	指定毫秒</span><br><span class="line">    返回值：	成功返回有多少文件描述符就绪，时间到时返回0，出错返回-1</span><br></pre></td></tr></table></figure>

<h4 id="2-4-启动epoll-epollrun函数"><a href="#2-4-启动epoll-epollrun函数" class="headerlink" title="2.4 启动epoll(epollrun函数)"></a>2.4 启动epoll(epollrun函数)</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//启动epoll</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">epollrun</span><span class="params">(<span class="type">int</span> lfd)</span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建epoll树</span></span><br><span class="line">    <span class="type">int</span> epfd = epoll_create(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(epfd == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;epoll_create error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. lfd上树</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev</span>;</span></span><br><span class="line">    ev.data.fd = lfd;</span><br><span class="line">    ev.events = EPOLLIN;</span><br><span class="line">    <span class="type">int</span> ret = epoll_ctl(epfd,EPOLL_CTL_ADD,lfd,&amp;ev);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;epoll_ctl error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 检测(委托内核检测添加到树上的节点)</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">evs</span>[1024];</span></span><br><span class="line">    <span class="type">int</span> size = siezof(evs) / <span class="keyword">sizeof</span>(<span class="keyword">struct</span> epoll_event);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="type">int</span> num = epoll_wait(epfd,evs,size,<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;epoll_wait error&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历发生变化的节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!(evs[i].events &amp; EPOLLIN)) &#123;</span><br><span class="line">                <span class="comment">// 不是读事件</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> fd = evs[i].data.fd;</span><br><span class="line">            <span class="keyword">if</span>(fd == lfd)&#123;</span><br><span class="line">                <span class="comment">// 建立新连接 accept</span></span><br><span class="line">                acceptClient(lfd,epfd);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 主要是接受对端的数据(读数据)</span></span><br><span class="line">                recvHttpRequest(fd,epfd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-建立连接"><a href="#3-建立连接" class="headerlink" title="3. 建立连接"></a>3. 建立连接</h3><h4 id="3-1-建立连接-（accept函数）"><a href="#3-1-建立连接-（accept函数）" class="headerlink" title="3.1 建立连接 （accept函数）"></a>3.1 建立连接 （accept函数）</h4><p><strong>三方握手完成后，服务器调用<code>accept()</code>接受连接</strong>，如果服务器调用<code>accept()</code>时还没有客户端的连接请求，就阻塞等待直到有客户端连接上来。<code>addr</code>是一个传出参数，<code>accept()</code>返回时传出客户端的地址和端口号。<code>addrlen</code>参数是一个传入传出参数（value-result argument），传入的是调用者提供的缓冲区<code>addr</code>的长度以避免缓冲区溢出问题，传出的是客户端地址结构体的实际长度（有可能没有占满调用者提供的缓冲区）。如果给<code>addr</code>参数传<code>NULL</code>，表示不关心客户端的地址。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt; 		/* See NOTES */</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);</span><br><span class="line">sockdf:</span><br><span class="line">	socket文件描述符</span><br><span class="line">addr:</span><br><span class="line">	传出参数，返回链接客户端地址信息，含IP地址和端口号</span><br><span class="line">addrlen:</span><br><span class="line">	传入传出参数（值-结果）,传入sizeof(addr)大小，函数返回时返回真正接收到地址结构体的大小</span><br><span class="line">返回值：</span><br><span class="line">	成功返回一个新的socket文件描述符，用于和客户端通信，失败返回-1，设置errno</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们的服务器程序结构是这样的：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">	cliaddr_len = <span class="keyword">sizeof</span>(cliaddr);</span><br><span class="line">	connfd = accept(listenfd, (<span class="keyword">struct</span> sockaddr *)&amp;cliaddr, &amp;cliaddr_len);</span><br><span class="line">	n = read(connfd, buf, MAXLINE);</span><br><span class="line">	......</span><br><span class="line">	close(connfd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>整个是一个while死循环，每次循环处理一个客户端连接。由于<code>cliaddr_len</code>是传入传出参数，每次调用<code>accept()</code>之前应该重新赋初值。<code>accept()</code>的参数<code>listenfd</code>是先前的监听文件描述符，而<code>accept()</code>的返回值是另外一个文件描述符<code>connfd</code>，之后与客户端之间就通过这个<code>connfd</code>通讯，最后关闭<code>connfd</code>断开连接，而不关闭<code>listenfd</code>，再次回到循环开头<code>listenfd</code>仍然用作<code>accept</code>的参数。<code>accept()</code>成功返回一个文件描述符，出错返回-1。</p>
<h4 id="3-2-epoll事件模型"><a href="#3-2-epoll事件模型" class="headerlink" title="3.2 epoll事件模型"></a>3.2 epoll事件模型</h4><p><code>EPOLL</code>事件有两种模型：</p>
<ul>
<li><p><code>Edge Triggered (ET) </code>边缘触发只有数据到来才触发，不管缓存区中是否还有数据。</p>
</li>
<li><p><code>Level Triggered (LT) </code>水平触发只要有数据都会触发。</p>
</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">思考如下步骤：</span><br><span class="line">1.	假定我们已经把一个用来从管道中读取数据的文件描述符(rfd)添加到epoll描述符。</span><br><span class="line">2.	管道的另一端写入了2KB的数据</span><br><span class="line">3.	调用epoll_wait，并且它会返回rfd，说明它已经准备好读取操作</span><br><span class="line">4.	读取1KB的数据</span><br><span class="line">5.	调用epoll_wait……</span><br></pre></td></tr></table></figure>

<p><strong>ET模式 即Edge Triggered工作模式（边沿触发）</strong></p>
<p>如果我们在第1步将<code>rfd</code>添加到<code>epoll</code>描述符的时候使用了<code>EPOLLET</code>标志，那么在第5步调用<code>epoll_wait</code>之后将有可能会挂起，因为剩余的数据还存在于文件的输入缓冲区内，而且数据发出端还在等待一个针对已经发出数据的反馈信息。只有在监视的文件句柄上发生了某个事件的时候 <code>ET</code> 工作模式才会汇报事件。因此在第5步的时候，调用者可能会放弃等待仍在存在于文件输入缓冲区内的剩余数据。<code>epoll</code>工作在<code>ET</code>模式的时候，必须使用非阻塞套接口，以避免由于一个文件句柄的阻塞读&#x2F;阻塞写操作把处理多个文件描述符的任务饿死。最好以下面的方式调用<code>ET</code>模式的<code>epoll</code>接口，在后面会介绍避免可能的缺陷。</p>
<ul>
<li><p>基于非阻塞文件句柄</p>
</li>
<li><p>只有当<code>read</code>或者<code>write</code>返回<code>EAGAIN</code>(非阻塞读，暂时无数据)时才需要挂起、等待。但这并不是说每次<code>read</code>时都需要循环读，直到读到产生一个<code>EAGAIN</code>才认为此次事件处理完成，当<code>read</code>返回的读到的数据长度小于请求的数据长度时，就可以确定此时缓冲中已没有数据了，也就可以认为此事读事件已处理完成。</p>
</li>
</ul>
<p><strong>LT模式即Level Triggered工作模式(水平触发)</strong></p>
<p>与<code>ET</code>模式不同的是，以<code>LT</code>方式调用<code>epoll</code>接口的时候，它就相当于一个速度比较快的<code>poll</code>，无论后面的数据是否被使用。</p>
<p><strong>比较</strong></p>
<p><code>LT(level triggered)</code>：<code>LT</code>是<strong>缺省</strong>的工作方式，并且同时支持<code>block</code>和<code>no-block socket</code>。在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的<code>fd</code>进行IO操作。如果你不作任何操作，内核还是会继续通知你的，所以，这种模式编程出错误可能性要小一点。**传统的<code>select/poll</code>**都是这种模型的代表。</p>
<p><code>ET(edge-triggered)</code>：**<code>ET</code>是高速工作方式，只支持<code>no-block socket</code>**。在这种模式下，当描述符从未就绪变为就绪时，内核通过<code>epoll</code>告诉你。然后它会假设你知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知。请注意，如果一直不对这个<code>fd</code>作IO操作(从而导致它再次变成未就绪)，内核不会发送更多的通知<code>**(only once)**</code>.</p>
<h4 id="3-3-阻塞与非阻塞"><a href="#3-3-阻塞与非阻塞" class="headerlink" title="3.3 阻塞与非阻塞"></a>3.3 阻塞与非阻塞</h4><ul>
<li>非阻塞模式可以理解为，执行此套接字的网络调用时，不管是否执行成功，都会立即返回。</li>
</ul>
<p>​		如调用<code>recv( )</code>函数读取网络缓冲区中的数据时，不管是否读到数据都立即返回，而不会一直挂在此函数的调用上。</p>
<ul>
<li>阻塞模式为只有接收到数据后才会返回，套接字默认的会创建堵塞模式。</li>
</ul>
<h4 id="3-4-建立连接（accpetClient函数）"><a href="#3-4-建立连接（accpetClient函数）" class="headerlink" title="3.4 建立连接（accpetClient函数）"></a>3.4 建立连接（accpetClient函数）</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">accpetClient</span><span class="params">(<span class="type">int</span> lfd,<span class="type">int</span> epfd)</span>&#123;</span><br><span class="line">    <span class="comment">// 1. 建立连接</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>;</span></span><br><span class="line">    <span class="type">socklen_t</span> len = <span class="keyword">sizeof</span>(cliaddr);</span><br><span class="line">    cliaddr.sin_family = AF_INET;</span><br><span class="line">    <span class="type">int</span> cfd = accept(lfd,(<span class="keyword">struct</span> sockaddr*)&amp;cliaddr,&amp;len);</span><br><span class="line">    <span class="keyword">if</span>(cfd == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;accept error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> ip[<span class="number">16</span>]=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;new client ip=%s port=%d\n&quot;</span>,</span><br><span class="line">    inet_ntop(AF_INET, &amp;cliaddr.sin_addr.s_addr,ip,<span class="number">16</span>),ntohs(cliaddr.sin_port));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 设置非阻塞</span></span><br><span class="line">    <span class="type">int</span> flag = fcntl(cfd,F_GETFL);</span><br><span class="line">    flag |= O_NONBLOCK;</span><br><span class="line">    fcntl(cfd,F_SETFL,flag);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. cfd添加到epoll</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev</span>;</span></span><br><span class="line">    ev.data.fd = cfd;</span><br><span class="line">    ev.events = EPOLLIN | EPOLLET;      <span class="comment">//边沿模式</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = epoll_ctl(epfd,EPOLL_CTL_ADD,cfd,&amp;ev);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;epoll_ctl error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-接收客户端发来的http请求"><a href="#4-接收客户端发来的http请求" class="headerlink" title="4. 接收客户端发来的http请求"></a>4. 接收客户端发来的http请求</h3><h4 id="4-1-接收数据-（recv函数）"><a href="#4-1-接收数据-（recv函数）" class="headerlink" title="4.1 接收数据 （recv函数）"></a>4.1 接收数据 （recv函数）</h4><p>接收来自<code>socket</code>缓冲区的数据，当缓冲区没有数据可取时，<code>recv</code>会一直处于阻塞状态()，直到缓冲区至少又一个字节数据可读取，或者对端关闭，并读取所有数据后返回。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">#include&lt;sys/types.h&gt;</span><br><span class="line">#include&lt;sys/socket.h&gt;</span><br><span class="line"></span><br><span class="line">int recv(int sockfd, char * buf, int len, int flags);</span><br><span class="line">sockfd：连接的fd</span><br><span class="line">buf：用于接收数据的缓冲区</span><br><span class="line">len：缓冲区长度</span><br><span class="line">flags：指定调用方式</span><br><span class="line">返回值：成功返回实际读到的字节数。如果recv在copy时出错，那么它返回err，err小于0；如果recv函数在等待协议接收数据时网络中断了，那么它返回0。</span><br></pre></td></tr></table></figure>

<p><strong>read</strong></p>
<p><code>read</code>函数从文件描述符（包括<code>TCP Socket</code>）中读取数据，并将读取的数据存储到指定的缓冲区中。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">ssize_t read(int fd, void *buf, size_t count);</span><br><span class="line">fd：要读取数据的文件描述符，可以是TCP Socket。</span><br><span class="line">buf：存储读取数据的缓冲区。</span><br><span class="line">count：要读取的字节数。</span><br><span class="line">返回值：成功时返回实际读取的字节数，失败时返回-1，并设置errno变量来指示错误的原因。</span><br></pre></td></tr></table></figure>

<p><code>read</code>函数和<code>recv</code>函数都是阻塞调用，即在没有数据可读时会一直阻塞等待。它们的主要区别在于<code>recv</code>函数可以通过<code>flags</code>参数控制一些特殊的行为，如设置<code>MSG_PEEK</code>标志来预览数据而不将其从缓冲区中移除。</p>
<h4 id="4-2-EAGAIN错误"><a href="#4-2-EAGAIN错误" class="headerlink" title="4.2 EAGAIN错误"></a>4.2 EAGAIN错误</h4><p>以<code>O_NONBLOCK</code>的标志打开文件<code>/socket/FIFO</code>，如果你连续做<code>read</code>或者<code>recv</code>操作而没有数据可读。此时程序不会阻塞起来等待数据准备就绪返回，<code>read</code>函数会返回一个错误<code>EAGAIN</code>，提示你的应用程序现在没有数据可读请稍后再试。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">（epoll的ET模式下设置recv，对应的fd文件描述符设置为非阻塞）下调用了阻塞操作，在该操作没有完成就返回这个错误，这个错误不会破坏socket的同步，不用管它，下次循环接着recv就可以。对非阻塞socket而言，EAGAIN不是一种错误。在VxWorks和Windows上，EAGAIN的名字叫做EWOULDBLOCK。</span><br></pre></td></tr></table></figure>

<h4 id="4-3-接受http请求（recvHttpRequest函数）"><a href="#4-3-接受http请求（recvHttpRequest函数）" class="headerlink" title="4.3 接受http请求（recvHttpRequest函数）"></a>4.3 接受http请求（recvHttpRequest函数）</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">recvHttpRequest</span><span class="params">(<span class="type">int</span> cfd,<span class="type">int</span> epfd)</span>&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">4096</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">char</span> tmp[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 1. 接收数据</span></span><br><span class="line">    <span class="keyword">while</span>((len = recv(cfd,tmp,<span class="keyword">sizeof</span>(tmp),<span class="number">0</span>)) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(total + len &lt; <span class="keyword">sizeof</span>(buf))&#123;</span><br><span class="line">            <span class="built_in">memcpy</span>(buf + total,tmp,len);</span><br><span class="line">        &#125;</span><br><span class="line">        total += len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 判断数据是否接受完毕</span></span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">-1</span> &amp;&amp; errno == EAGAIN)&#123;</span><br><span class="line">        <span class="comment">// 解析请求行   </span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19</span></span><br><span class="line"><span class="comment">        G E T   / 1 . t x t H  T  T  P  /  1  .  1  /r /n</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">char</span>* pt = <span class="built_in">strstr</span>(buf,<span class="string">&quot;\r\n&quot;</span>);  <span class="comment">//大字符串找小字符串</span></span><br><span class="line">        <span class="type">int</span> reqLen = pt - buf;</span><br><span class="line">        buf[reqLen] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// 客户端断开连接</span></span><br><span class="line">        epoll_ctl(epfd,EPOLL_CTL_DEL,cfd,<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        perror(<span class="string">&quot;recv error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-解析请求行"><a href="#5-解析请求行" class="headerlink" title="5. 解析请求行"></a>5. 解析请求行</h3><h4 id="5-1-格式化拆分字符串-（sscanf函数）"><a href="#5-1-格式化拆分字符串-（sscanf函数）" class="headerlink" title="5.1 格式化拆分字符串 （sscanf函数）"></a>5.1 格式化拆分字符串 （sscanf函数）</h4><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">sprintf（）是把格式化数据输出成（存储到）字符串。</span><br><span class="line">sscanf（）是从字符串中读取格式化的数据。</span><br></pre></td></tr></table></figure>

<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">// 函数原型</span><br><span class="line">// 将参数str的字符串根据参数format字符串来转换并格式化数据，转换后的结果存于对应的参数内。</span><br><span class="line">sscanf(const char *str, const char *format, ...)。</span><br><span class="line"></span><br><span class="line">具体功能如下：</span><br><span class="line">（1）根据格式从字符串中提取数据。如从字符串中取出整数、浮点数和字符串等。</span><br><span class="line">（2）取指定长度的字符串</span><br><span class="line">（3）取到指定字符为止的字符串</span><br><span class="line">（4）取仅包含指定字符集的字符串</span><br><span class="line">（5）取到指定字符集为止的字符串</span><br><span class="line"></span><br><span class="line">// 可以使用正则表达式进行字符串的拆分</span><br><span class="line">// shell脚本的时候, 会将正则表达式, 其实就是字符串的匹配规则, 用特殊字符来描述一类字符串</span><br><span class="line">/*</span><br><span class="line">正则匹配规则:</span><br><span class="line">	[1-9]: 匹配一个字符, 这个字符在 1-9 范围内就满足条件</span><br><span class="line">	[2-7]: 匹配一个字符, 这个字符在 2-7 范围内就满足条件</span><br><span class="line">	[a-z]: 匹配一个字符, 这个字符在 a-z 范围内就满足条件</span><br><span class="line">	[A,b,c,D, e, f]: 匹配一个字符, 这个字符是集合中任意一个就满足条件</span><br><span class="line">	[1-9, f-x]: 匹配一个字符, 这个字符是1-9, 或者f-x 集合中的任意一个就满足条件</span><br><span class="line">	[^1]: ^代表否定, 匹配一个字符,这个字符只要不是1就满足条件</span><br><span class="line">	[^2-8]: 匹配一个字符,这个字符只要不在 2-8 范围内就满足条件</span><br><span class="line">	[^a-f]: 匹配一个字符,这个字符只要不在 a-f 范围内就满足条件</span><br><span class="line">	[^ ]: 匹配一个字符,这个字符只要不是空格就满足条件</span><br><span class="line">使用正则表达式如何取匹配字符串:</span><br><span class="line">举例: </span><br><span class="line">	字符串 ==&gt; abcdefg12345AABBCCDD890</span><br><span class="line">	正则表达式: [1-9][a-z], 可以匹配两个字符</span><br><span class="line">	匹配方式: 从原始字符串开始位置遍历, 每遍历一个字符都需要和正则表达式进行匹配, </span><br><span class="line">		满足条件继续向后匹配, 不满足条件, 匹配结束</span><br><span class="line">		从新开始: 从正则表达式的第一个字符重新开始向后一次匹配</span><br><span class="line">			当整个大字符串被匹配一遍, 就结束了</span><br><span class="line">	abcdefg12345AABBCCDD893b</span><br><span class="line">		- 匹配到一个子字符串: 3b</span><br><span class="line">	1a2b3c4d5e6f7g12345AABBCCDD893b</span><br><span class="line">	 - 1a</span><br><span class="line">	 - 2b</span><br><span class="line">	 - 3c</span><br><span class="line">	 - 4d</span><br><span class="line">	 - 5e</span><br><span class="line">	 - 6f</span><br><span class="line">	 - 7g</span><br><span class="line">	 - 3b</span><br><span class="line">*/</span><br><span class="line">sscanf可以支持格式字符%[]：</span><br><span class="line"></span><br><span class="line">(1)-: 表示范围，如：%[1-9]表示只读取1-9这几个数字 %[a-z]表示只读取a-z小写字母，类似地 %[A-Z]只读取大写字母</span><br><span class="line">(2)^: 表示不取，如：%[^1]表示读取除&#x27;1&#x27;以外的所有字符 %[^/]表示除/以外的所有字符</span><br><span class="line">(3),: 范围可以用&quot;,&quot;相连接 如%[1-9,a-z]表示同时取1-9数字和a-z小写字母 </span><br><span class="line">(4)原则：从第一个在指定范围内的数字开始读取，到第一个不在范围内的数字结束%s 可以看成%[] 的一个特例 %[^ ](注意^后面有一个空格！)</span><br></pre></td></tr></table></figure>

<h4 id="5-2-转码"><a href="#5-2-转码" class="headerlink" title="5.2 转码"></a>5.2 转码</h4><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">假设浏览器访问的文件名中有中文: Linux内核.jpg</span><br><span class="line">	- 浏览器在给服务器发送请求的时候, 会自动将中文进制转换: Linux%E5%86%85%E6%A0%B8.jpg</span><br><span class="line">	- 为什么要转换?</span><br><span class="line">		- 在http请求的请求行中不支持中文字符, 如果有中文, 浏览器就会自动将中文进行转换</span><br><span class="line">		- 在服务器端收到的文件名就不是原来的名字了, 因此服务器端就不能识别了</span><br><span class="line">		- 如果服务器端想要正确的处理, 需要将特殊字符串解析成原来的汉字</span><br><span class="line">		</span><br><span class="line">$ unicode 内</span><br><span class="line">UTF-8: e5 86 85 </span><br><span class="line">$ unicode 核</span><br><span class="line">UTF-8: e6 a0 b8</span><br></pre></td></tr></table></figure>

<h4 id="5-3-获取文件信息（stat）"><a href="#5-3-获取文件信息（stat）" class="headerlink" title="5.3 获取文件信息（stat）"></a>5.3 获取文件信息（stat）</h4><p><code>Linux</code> 下可以使用<code>stat </code>命令查看文件的属性，其实这个命令内部就是通过调用<code> stat()</code>函数来获取文件属性的，<code>stat </code>函数是 <code>Linux </code>中的系统调用，用于获取文件相关的信息。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/stat.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">int stat(const char *pathname, struct stat *buf);</span><br></pre></td></tr></table></figure>

<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">struct stat</span><br><span class="line">&#123;</span><br><span class="line">	 dev_t st_dev; /* 文件所在设备的 ID */</span><br><span class="line">	 ino_t st_ino; /* 文件对应 inode 节点编号 */</span><br><span class="line">	 mode_t st_mode; /* 文件对应的模式 */</span><br><span class="line">	 nlink_t st_nlink; /* 文件的链接数 */</span><br><span class="line">	 uid_t st_uid; /* 文件所有者的用户 ID */</span><br><span class="line">	 gid_t st_gid; /* 文件所有者的组 ID */</span><br><span class="line">	 dev_t st_rdev; /* 设备号（指针对设备文件） */</span><br><span class="line">	 off_t st_size; /* 文件大小（以字节为单位） */</span><br><span class="line">	 blksize_t st_blksize; /* 文件内容存储的块大小 */</span><br><span class="line">	 blkcnt_t st_blocks; /* 文件内容所占块数 */</span><br><span class="line">	 struct timespec st_atim; /* 文件最后被访问的时间 */</span><br><span class="line">	 struct timespec st_mtim; /* 文件内容最后被修改的时间 */</span><br><span class="line">	 struct timespec st_ctim; /* 文件状态最后被改变的时间 */</span><br><span class="line">&#125;;</span><br><span class="line">st_dev：该字段用于描述此文件所在的设备。不常用，可以不用理会。</span><br><span class="line">st_ino：文件的 inode 编号。</span><br><span class="line">st_mode：该字段用于描述文件的模式，譬如文件类型、文件权限都记录在该变量中。</span><br><span class="line">st_nlink：该字段用于记录文件的硬链接数，也就是为该文件创建了多少个硬链接文件。链接文件可以分为软链接（符号链接）文件和硬链接文件。</span><br><span class="line">st_uid、st_gid：此两个字段分别用于描述文件所有者的用户 ID 以及文件所有者的组 ID。</span><br><span class="line">st_rdev：该字段记录了设备号，设备号只针对于设备文件，包括字符设备文件和块设备文件，不用理会。</span><br><span class="line">st_size：该字段记录了文件的大小（逻辑大小），以字节为单位。</span><br><span class="line">st_atim、st_mtim、st_ctim：此三个字段分别用于记录文件最后被访问的时间、文件内容最后被修改的时间以及文件状态最后被改变的时间，都是 struct timespec 类型变量。</span><br></pre></td></tr></table></figure>

<h4 id="5-3-解析请求行（parseRequestLine函数）"><a href="#5-3-解析请求行（parseRequestLine函数）" class="headerlink" title="5.3 解析请求行（parseRequestLine函数）"></a>5.3 解析请求行（parseRequestLine函数）</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">parseRequestLine</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* line,<span class="type">int</span> cfd)</span>&#123;</span><br><span class="line">    <span class="comment">// 1. 拆分http请求行   get /xxx/1.jpg http/1.1</span></span><br><span class="line">    <span class="type">char</span> method[<span class="number">12</span>];    <span class="comment">// 方法</span></span><br><span class="line">    <span class="type">char</span> path[<span class="number">1024</span>];    <span class="comment">// 路径</span></span><br><span class="line">    <span class="type">char</span> protocol[<span class="number">12</span>];  <span class="comment">// 协议</span></span><br><span class="line">    <span class="built_in">sscanf</span>(line,<span class="string">&quot;%[^ ] %[^ ] %[^ ]&quot;</span>,method,path,protocol);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;method = %s, path = %s, protocol = %s\n&quot;</span>, method, path, protocol);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否是get请求</span></span><br><span class="line">    <span class="keyword">if</span>(strcasecmp(method,<span class="string">&quot;get&quot;</span>) != <span class="number">0</span>)&#123;     <span class="comment">//不区分大小写</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转码 将不能识别的中文乱码 -&gt; 中文</span></span><br><span class="line">    <span class="comment">// 解码 %23 %34 %5f</span></span><br><span class="line">    decode_str(path, path);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 处理客户端请求的静态资源</span></span><br><span class="line">    <span class="type">char</span>* file = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 如果没有指定访问的资源, 默认显示资源目录中的内容</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(path,<span class="string">&quot;/&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// file的值, 资源目录的当前位置</span></span><br><span class="line">        file = <span class="string">&quot;./&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 去掉path中的/ 获取访问文件名</span></span><br><span class="line">        file = path + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 获取文件属性</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line">    <span class="type">int</span> ret = stat(file,&amp;st);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="comment">// 文件不存在--回复404</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断文件类型（判断是目录还是文件）</span></span><br><span class="line">    <span class="keyword">if</span>(S_ISDIR(st.st_mode))&#123;    <span class="comment">// 目录</span></span><br><span class="line">        <span class="comment">// 把目录发给客户端</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 把文件内容发给客户端</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-发送响应头"><a href="#6-发送响应头" class="headerlink" title="6. 发送响应头"></a>6. 发送响应头</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sendHeadMsg</span><span class="params">(<span class="type">int</span> cfd,<span class="type">int</span> status,<span class="type">const</span> <span class="type">char</span>* desrc,<span class="type">const</span> <span class="type">char</span>* type,<span class="type">int</span> length)</span>&#123;</span><br><span class="line">    <span class="comment">// 状态行</span></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">4096</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">sprintf</span>(buf,<span class="string">&quot;http/1.1 %d %s \r\n&quot;</span>,status,desrc);</span><br><span class="line">    <span class="comment">// 消息报头</span></span><br><span class="line">    <span class="built_in">sprintf</span>(buf + <span class="built_in">strlen</span>(buf),<span class="string">&quot;Content-Type: %s\r\n&quot;</span>,type);</span><br><span class="line">    <span class="built_in">sprintf</span>(buf + <span class="built_in">strlen</span>(buf),<span class="string">&quot;Content-Length: %d\r\n&quot;</span>,length);</span><br><span class="line"></span><br><span class="line">    send(cfd,buf,<span class="built_in">strlen</span>(buf),<span class="number">0</span>);</span><br><span class="line">     <span class="comment">// 空行</span></span><br><span class="line">    send(cfd, <span class="string">&quot;\r\n&quot;</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-通过文件名获取文件的类型"><a href="#7-通过文件名获取文件的类型" class="headerlink" title="7. 通过文件名获取文件的类型"></a>7. 通过文件名获取文件的类型</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过文件名获取文件的类型</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="title function_">get_file_type</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* dot;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自右向左查找‘.’字符, 如不存在返回NULL</span></span><br><span class="line">    dot = <span class="built_in">strrchr</span>(name, <span class="string">&#x27;.&#x27;</span>);   </span><br><span class="line">    <span class="keyword">if</span> (dot == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;text/plain; charset=utf-8&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.html&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(dot, <span class="string">&quot;.htm&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;text/html; charset=utf-8&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.jpg&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(dot, <span class="string">&quot;.jpeg&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;image/jpeg&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.gif&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;image/gif&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.png&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;image/png&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.css&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;text/css&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.au&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;audio/basic&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>( dot, <span class="string">&quot;.wav&quot;</span> ) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;audio/wav&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.avi&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;video/x-msvideo&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.mov&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(dot, <span class="string">&quot;.qt&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;video/quicktime&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.mpeg&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(dot, <span class="string">&quot;.mpe&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;video/mpeg&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.vrml&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(dot, <span class="string">&quot;.wrl&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;model/vrml&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.midi&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(dot, <span class="string">&quot;.mid&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;audio/midi&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.mp3&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;audio/mpeg&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.ogg&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;application/ogg&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.pac&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;application/x-ns-proxy-autoconfig&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;text/plain; charset=utf-8&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-发送文件"><a href="#8-发送文件" class="headerlink" title="8. 发送文件"></a>8. 发送文件</h3><h4 id="8-1-断言（assert函数）"><a href="#8-1-断言（assert函数）" class="headerlink" title="8.1 断言（assert函数）"></a>8.1 断言（assert函数）</h4><p>编译期<code>assert</code>函数的目的在于当条件不满足时，阻止编译，从而防止错误的逻辑通过编辑。而运行期<code>assert</code>的目的在于运行时发现条件不满足时，产生一个<code>Debug</code>事件(<code>DebugBreak</code>)，从而让调试器停下来方便用户检查原因。<code>assert </code>是一个宏，不是函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//表达式可以是任何有效的 C 语言表达式，很多时候它是一个条件。</span><br><span class="line">void assert(int expression or variable);</span><br></pre></td></tr></table></figure>

<h4 id="8-2-光标函数（lseek函数）"><a href="#8-2-光标函数（lseek函数）" class="headerlink" title="8.2 光标函数（lseek函数）"></a>8.2 光标函数（lseek函数）</h4><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt; </span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">off_t lseek(int handle, off_t offset, int fromwhere);</span><br><span class="line">1) 欲将读写位置移到文件开头时:</span><br><span class="line">lseek（int fildes,0,SEEK_SET）；</span><br><span class="line">2) 欲将读写位置移到文件尾时:</span><br><span class="line">lseek（int fildes，0,SEEK_END）；</span><br><span class="line">3) 想要取得目前文件位置时:</span><br><span class="line">lseek（int fildes，0,SEEK_CUR）；</span><br></pre></td></tr></table></figure>

<h4 id="8-3-发送文件（sendFile函数）"><a href="#8-3-发送文件（sendFile函数）" class="headerlink" title="8.3 发送文件（sendFile函数）"></a>8.3 发送文件（sendFile函数）</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sendFile</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename,<span class="type">int</span> cfd)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 打开文件</span></span><br><span class="line">    <span class="type">int</span> fd = open(filename,O_RDONLY);</span><br><span class="line">    assert(fd &gt; <span class="number">0</span>);     <span class="comment">// 断言</span></span><br><span class="line">    <span class="comment">// if(fd == -1)&#123;</span></span><br><span class="line">    <span class="comment">//     perror(&quot;open error&quot;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 2. 循环读文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">4096</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>, ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((len = read(fd,buf,<span class="keyword">sizeof</span>(buf))) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// 发送读出的数据</span></span><br><span class="line">        ret = send(cfd,buf,len,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(errno = EAGAIN)&#123;</span><br><span class="line">                perror(<span class="string">&quot;send error:&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (errno == EINTR) &#123;</span><br><span class="line">                perror(<span class="string">&quot;send error:&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                perror(<span class="string">&quot;send error:&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="type">off_t</span> offset = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> size = lseek(fd,<span class="number">0</span>,SEEK_END);</span><br><span class="line">    lseek(fd,<span class="number">0</span>,SEEK_SET);</span><br><span class="line">    <span class="keyword">while</span>(offset &lt; size)&#123;</span><br><span class="line">        <span class="type">int</span> ret = sendfile(cfd,fd,&amp;offset,size);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ret value: %d\n&quot;</span>,ret);</span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="number">-1</span> &amp;&amp; errno == EAGAIN)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;没数据。。。\n&quot;</span>);</span><br><span class="line">            perror(<span class="string">&quot;snedfile&quot;</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9-发送目录"><a href="#9-发送目录" class="headerlink" title="9. 发送目录"></a>9. 发送目录</h3><h4 id="9-1-目录扫描函数（scandir函数）"><a href="#9-1-目录扫描函数（scandir函数）" class="headerlink" title="9.1 目录扫描函数（scandir函数）"></a>9.1 目录扫描函数（scandir函数）</h4><p><code>scandir()</code>会扫描参数<code>dir</code>指定的目录文件，经由参数<code>select</code>指定的函数来挑选目录结构至参数<code>namelist</code>数组中，最后再调用参数<code>compar</code>指定的函数来排序<code>namelist</code>数组中的目录数据。每次从目录文件中读取一个目录结构后便将此结构传给参数<code>select</code>所指的函数，<code>select</code>函数若不想要将此目录结构复制到<code>namelis</code>t数组就返回0，若<code>select</code>为空指针则代表选择所有的目录结构。<code>scandir()</code>会调用<code>qsort()</code>来排序数据，参数<code>compar</code>则为<code>qsort()</code>的参数，若是要排列目录名称字母则可使用<code>alphasort()</code>。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">#include &lt;dirent.h&gt;</span><br><span class="line">int scandir(const char *dir, </span><br><span class="line">			struct dirent ***namelist,</span><br><span class="line">			int (*select)(const struct dirent *),</span><br><span class="line">			int (*compar)(const struct dirent **, </span><br><span class="line">			const struct dirent **));</span><br><span class="line">dir:指定扫描的目录</span><br><span class="line">namelist:struct dirent结构体类型的三级指针，用于获取该函数内部为存放返回结果的分配的动态内存</span><br><span class="line">select:函数指针，指向过滤模式函数,当selectr指针设置为NULL时，扫描dir目录下的所有顶层文件.该函数有一个参数const struct dirent *是指在遍历过程中所遍历到的每一个子目录dirent，select可以根据dirent的类型、名称等信息来判定当前的dirent是否为合法的子目录，合法则函数返回0，则该子目录的名称会被存储在namelist中；否则返回非0，则该子目录被过滤掉。</span><br><span class="line">compar:函数指针，指向对遍历结果进行排序函数，alphasort函数和versionsort是经常用到的函数</span><br></pre></td></tr></table></figure>

<h4 id="9-2-发送目录（sendDir函数）"><a href="#9-2-发送目录（sendDir函数）" class="headerlink" title="9.2 发送目录（sendDir函数）"></a>9.2 发送目录（sendDir函数）</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送目录内容</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sendDir</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* dirname, <span class="type">int</span> cfd)</span></span><br><span class="line">&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 拼接一个html页面&lt;table&gt;&lt;/table&gt;</span></span><br><span class="line">   <span class="type">char</span> buf[<span class="number">4096</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">sprintf</span>(buf,<span class="string">&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;目录名：%s&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;table&gt;&quot;</span>,dirname);</span><br><span class="line">   <span class="comment">//sprintf(buf + strlen(buf),&quot;&lt;body&gt;&lt;h1&gt;当前目录：%s&lt;/h1&gt;&lt;table&gt;&quot;,dirname);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 目录项二级指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span>** <span class="title">ptr</span>;</span></span><br><span class="line">    <span class="type">int</span> num = scandir(dirname,&amp;ptr,<span class="literal">NULL</span>,alphasort);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历目录</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">        <span class="comment">// 取出文件名 namelist 指向的是一个指针数组 struct dirent* tmp[]</span></span><br><span class="line">        <span class="type">char</span>* name = ptr[i]-&gt;d_name;</span><br><span class="line">        <span class="type">char</span> subPath[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="comment">// 拼接文件袋完整路径</span></span><br><span class="line">        <span class="built_in">sprintf</span>(subPath,<span class="string">&quot;%s/%s&quot;</span>,dirname,name);</span><br><span class="line">        </span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line">        stat(subPath,&amp;st);</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> enstr[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="comment">// 编码生成 %E5 %A7 之类的东西</span></span><br><span class="line">        encode_str(enstr, <span class="keyword">sizeof</span>(enstr), name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是文件</span></span><br><span class="line">        <span class="keyword">if</span>(S_ISREG(st.st_mode)) &#123;       </span><br><span class="line">            <span class="built_in">sprintf</span>(buf+<span class="built_in">strlen</span>(buf), </span><br><span class="line">                    <span class="string">&quot;&lt;tr&gt;&lt;td&gt;&lt;a href=\&quot;%s\&quot;&gt;%s&lt;/a&gt;&lt;/td&gt;&lt;td&gt;%ld&lt;/td&gt;&lt;/tr&gt;&quot;</span>,</span><br><span class="line">                    enstr, name, (<span class="type">long</span>)st.st_size);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(S_ISDIR(st.st_mode)) &#123;		<span class="comment">// 如果是目录       </span></span><br><span class="line">            <span class="built_in">sprintf</span>(buf+<span class="built_in">strlen</span>(buf), </span><br><span class="line">                    <span class="string">&quot;&lt;tr&gt;&lt;td&gt;&lt;a href=\&quot;%s/\&quot;&gt;%s/&lt;/a&gt;&lt;/td&gt;&lt;td&gt;%ld&lt;/td&gt;&lt;/tr&gt;&quot;</span>,</span><br><span class="line">                    enstr, name, (<span class="type">long</span>)st.st_size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ret = send(cfd, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (errno == EAGAIN) &#123;</span><br><span class="line">                perror(<span class="string">&quot;send error:&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (errno == EINTR) &#123;</span><br><span class="line">                perror(<span class="string">&quot;send error:&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                perror(<span class="string">&quot;send error:&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">        <span class="comment">// 字符串拼接</span></span><br><span class="line">        <span class="built_in">free</span>(ptr[i]);</span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 字符串拼接</span></span><br><span class="line">    <span class="comment">//memset(buf, 0, sizeof(buf));</span></span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">&quot;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    send(cfd, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;dir message send OK!!!!\n&quot;</span>); </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    <span class="comment">// 打开目录</span></span><br><span class="line">    DIR* dir = opendir(dirname);</span><br><span class="line">    <span class="keyword">if</span>(dir == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;opendir error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读目录</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span>* <span class="title">ptr</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>( (ptr = readdir(dir)) != <span class="literal">NULL</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span>* name = ptr-&gt;d_name;</span><br><span class="line">    &#125;</span><br><span class="line">    closedir(dir);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="10-完整代码"><a href="#10-完整代码" class="headerlink" title="10. 完整代码"></a>10. 完整代码</h3><h4 id="整体框架"><a href="#整体框架" class="headerlink" title="整体框架"></a>整体框架</h4><p><img   src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20231028135200278.png"  alt="image-20231028135200278"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">客户端: 浏览器</span></span><br><span class="line"><span class="comment">	- 通过浏览器访问服务器:</span></span><br><span class="line"><span class="comment">		- 访问方式: 服务器的IP地址:端口</span></span><br><span class="line"><span class="comment">	- 应用层协议使用: http, 数据需要在浏览器端使用该协议进行包装</span></span><br><span class="line"><span class="comment">	- 响应消息的处理也是浏览器完成的 =&gt; 程序猿不需要管</span></span><br><span class="line"><span class="comment">	- 客户端通过url访问服务器资源</span></span><br><span class="line"><span class="comment">		- 客户端访问的路径:</span></span><br><span class="line"><span class="comment">		1. http://192.168.1.100:8989/  或者  http://192.168.1.100:8989</span></span><br><span class="line"><span class="comment">			- 访问服务器提供的资源目录的根目录</span></span><br><span class="line"><span class="comment">				- 并不是服务器上的 / 目录  </span></span><br><span class="line"><span class="comment">				- 这个目录根据服务器端的描述应该是: /home/robin/luffy 目录</span></span><br><span class="line"><span class="comment">			- 请求行:</span></span><br><span class="line"><span class="comment">				GET / HTTP/1.1</span></span><br><span class="line"><span class="comment">		2. http://192.168.1.100:8989/a.txt</span></span><br><span class="line"><span class="comment">			- 端口后边的/代表服务器的资源根目录</span></span><br><span class="line"><span class="comment">				- 在服务器端路径: /home/robin/luffy 目录</span></span><br><span class="line"><span class="comment">			- 客户端要访问服务器上的a.txt的文件</span></span><br><span class="line"><span class="comment">			- a.txt 这个文件在服务器提供的资源目录中</span></span><br><span class="line"><span class="comment">				- 服务器上的路径: /home/robin/luffy/a.txt</span></span><br><span class="line"><span class="comment">			- 请求行:</span></span><br><span class="line"><span class="comment">				GET /a.txt HTTP/1.1</span></span><br><span class="line"><span class="comment">		3. http://192.168.1.100:8989/hello/a.txt</span></span><br><span class="line"><span class="comment">			- http://192.168.1.100:8989: 服务器地址</span></span><br><span class="line"><span class="comment">			- /hello/a.txt</span></span><br><span class="line"><span class="comment">				- /: 服务器端提供的资源根目录</span></span><br><span class="line"><span class="comment">				- hello: 资源根目录的子目录</span></span><br><span class="line"><span class="comment">				- a.txt: 在hello目录中</span></span><br><span class="line"><span class="comment">			- 请求行:</span></span><br><span class="line"><span class="comment">				GET /hello/a.txt HTTP/1.1</span></span><br><span class="line"><span class="comment">		4. http://192.168.1.100:8989/hello/wrold/</span></span><br><span class="line"><span class="comment">			- http://192.168.1.100:8989: 服务器地址</span></span><br><span class="line"><span class="comment">			- /hello/world/</span></span><br><span class="line"><span class="comment">				- /: 服务器端提供的资源根目录</span></span><br><span class="line"><span class="comment">				- hello: 资源根目录的子目录</span></span><br><span class="line"><span class="comment">				- world/: 如果world后边有/代表这是一个目录, 这个目录在hello目录中</span></span><br><span class="line"><span class="comment">			- 请求行:</span></span><br><span class="line"><span class="comment">				GET /hello/world/ HTTP/1.1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">服务器端: 提供服务器, 让客户端访问</span></span><br><span class="line"><span class="comment">	- 支持多客户端访问</span></span><br><span class="line"><span class="comment">		- 使用IO多路转接 =&gt; epoll</span></span><br><span class="line"><span class="comment">	- 客户端发送给的请求消息是基于http的</span></span><br><span class="line"><span class="comment">		- 需要能够解析http请求</span></span><br><span class="line"><span class="comment">	- 服务器回复客户端数据, 使用http协议封装回复的数据 ==&gt; http响应</span></span><br><span class="line"><span class="comment">	- 服务器端需要提供一个资源目录, 目录中的文件可以供客户端访问</span></span><br><span class="line"><span class="comment">		- 客户端访问的文件没有在资源目录中, 就不能访问了</span></span><br><span class="line"><span class="comment">			- 假设服务器提供个资源目录: /home/robin/luffy 目录</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 服务器端处理的伪代码</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 1. 创建监听的fd</span></span><br><span class="line">    socket();</span><br><span class="line">    <span class="comment">// 2. 绑定</span></span><br><span class="line">    bind();</span><br><span class="line">    <span class="comment">// 3. 设置监听</span></span><br><span class="line">    listen();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4. 创建epoll模型</span></span><br><span class="line">    epoll_create();</span><br><span class="line">    epoll_ctl();</span><br><span class="line">    <span class="comment">// 5. 检测</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        epoll_wait();</span><br><span class="line">        <span class="comment">// 监听的文件描述符</span></span><br><span class="line">        accept();</span><br><span class="line">        <span class="comment">// 通信的</span></span><br><span class="line">        <span class="comment">// 接收数据-&gt;http请求消息</span></span><br><span class="line">        recvAndParseHttp();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于边沿非阻塞模型接收数据</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">recvAndParseHttp</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 循环接收数据</span></span><br><span class="line">    <span class="comment">// 解析http请求消息</span></span><br><span class="line">    <span class="comment">// http请求由两种:get / post</span></span><br><span class="line">    <span class="comment">// 只处理get请求, 浏览器向服务器请求访问的文件都是静态资源, 因此使用get就可以</span></span><br><span class="line">    <span class="comment">// 判断是不是get请求  ==&gt; 在请求行中 ==&gt; 请求行的第一部分</span></span><br><span class="line">    <span class="comment">// 客户端向服务器请求的静态资源是什么? =&gt; 请求行的第二部分</span></span><br><span class="line">    <span class="comment">// 找到服务器上的静态资源</span></span><br><span class="line">    	- 文件 -&gt; 读文件内容</span><br><span class="line">        - 目录 -&gt; 遍历目录</span><br><span class="line">    <span class="comment">// 将文件内容或者目录内容打包到http响应协议中</span></span><br><span class="line">    <span class="comment">// 将整条协议发送回给客户端即可</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="epoll-web-c"><a href="#epoll-web-c" class="headerlink" title="epoll_web.c"></a><strong>epoll_web.c</strong></h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;epoll_web.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;strings.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sendfile.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="comment">// 初始化监听套接字</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">initListenFd</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> port)</span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建监听套接字</span></span><br><span class="line">    <span class="type">int</span> lfd = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(lfd == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;socket error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 设置端口复用</span></span><br><span class="line">    <span class="type">int</span> opt = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ret = setsockopt(lfd,SOL_SOCKET,SO_REUSEADDR,&amp;opt,<span class="keyword">sizeof</span>(opt));</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;setsockopt error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 绑定</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(port);</span><br><span class="line">    addr.sin_addr.s_addr = <span class="number">0</span>;</span><br><span class="line">    ret = bind(lfd,(<span class="keyword">struct</span> sockaddr *)&amp;addr,<span class="keyword">sizeof</span>(addr));</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;bind error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.设置监听</span></span><br><span class="line">    ret = listen(lfd,<span class="number">128</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;listen error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5. 返回fd</span></span><br><span class="line">    <span class="keyword">return</span> lfd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动epoll</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">epollrun</span><span class="params">(<span class="type">int</span> lfd)</span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建epoll树</span></span><br><span class="line">    <span class="type">int</span> epfd = epoll_create(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(epfd == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;epoll_create error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. lfd上树</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev</span>;</span></span><br><span class="line">    ev.data.fd = lfd;</span><br><span class="line">    ev.events = EPOLLIN;</span><br><span class="line">    <span class="type">int</span> ret = epoll_ctl(epfd,EPOLL_CTL_ADD,lfd,&amp;ev);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;epoll_ctl error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 检测(委托内核检测添加到树上的节点)</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">evs</span>[1024];</span></span><br><span class="line">    <span class="type">int</span> size = <span class="keyword">sizeof</span>(evs) / <span class="keyword">sizeof</span>(<span class="keyword">struct</span> epoll_event);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="type">int</span> num = epoll_wait(epfd,evs,size,<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;epoll_wait error&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历发生变化的节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!(evs[i].events &amp; EPOLLIN)) &#123;</span><br><span class="line">                <span class="comment">// 不是读事件</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> fd = evs[i].data.fd;</span><br><span class="line">            <span class="keyword">if</span>(fd == lfd)&#123;</span><br><span class="line">                <span class="comment">//建立新连接accept</span></span><br><span class="line">                accpetClient(lfd,epfd);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 读数据</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;=============before recvHttpRequest=============\n&quot;</span>);</span><br><span class="line">                recvHttpRequest(fd,epfd);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;=============after recvHttpRequest=============\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">accpetClient</span><span class="params">(<span class="type">int</span> lfd,<span class="type">int</span> epfd)</span>&#123;</span><br><span class="line">    <span class="comment">// 1. 建立连接</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>;</span></span><br><span class="line">    <span class="type">socklen_t</span> len = <span class="keyword">sizeof</span>(cliaddr);</span><br><span class="line">    cliaddr.sin_family = AF_INET;</span><br><span class="line">    <span class="type">int</span> cfd = accept(lfd,(<span class="keyword">struct</span> sockaddr*)&amp;cliaddr,&amp;len);</span><br><span class="line">    <span class="keyword">if</span>(cfd == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;accept error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> ip[<span class="number">16</span>]=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;new client ip=%s port=%d\n&quot;</span>,</span><br><span class="line">    inet_ntop(AF_INET, &amp;cliaddr.sin_addr.s_addr,ip,<span class="number">16</span>),ntohs(cliaddr.sin_port));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 设置cfd为非阻塞</span></span><br><span class="line">    <span class="type">int</span> flag = fcntl(cfd,F_GETFL);</span><br><span class="line">    flag |= O_NONBLOCK;</span><br><span class="line">    fcntl(cfd,F_SETFL,flag);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. cfd添加到epoll</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev</span>;</span></span><br><span class="line">    ev.data.fd = cfd;</span><br><span class="line">    <span class="comment">// 边沿非阻塞模式</span></span><br><span class="line">    ev.events = EPOLLIN | EPOLLET;      <span class="comment">//边沿模式</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = epoll_ctl(epfd,EPOLL_CTL_ADD,cfd,&amp;ev);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;epoll_ctl error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">recvHttpRequest</span><span class="params">(<span class="type">int</span> cfd,<span class="type">int</span> epfd)</span>&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">4096</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">char</span> tmp[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 1. 接收数据</span></span><br><span class="line">    <span class="keyword">while</span>((len = recv(cfd,tmp,<span class="keyword">sizeof</span>(tmp),<span class="number">0</span>)) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(total + len &lt; <span class="keyword">sizeof</span>(buf))&#123;</span><br><span class="line">            <span class="built_in">memcpy</span>(buf + total,tmp,len);</span><br><span class="line">        &#125;</span><br><span class="line">        total += len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 判断数据是否接受完毕</span></span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">-1</span> &amp;&amp; errno == EAGAIN)&#123;</span><br><span class="line">        <span class="comment">// 解析请求行   </span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19</span></span><br><span class="line"><span class="comment">        G E T   / 1 . t x t H  T  T  P  /  1  .  1  /r /n</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">char</span>* pt = <span class="built_in">strstr</span>(buf,<span class="string">&quot;\r\n&quot;</span>);  <span class="comment">//大字符串找小字符串</span></span><br><span class="line">        <span class="type">int</span> reqLen = pt - buf;</span><br><span class="line">        buf[reqLen] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        parseRequestLine(buf,cfd);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// 客户端断开连接</span></span><br><span class="line">        epoll_ctl(epfd,EPOLL_CTL_DEL,cfd,<span class="literal">NULL</span>);</span><br><span class="line">        close(cfd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        perror(<span class="string">&quot;recv error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">parseRequestLine</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* line,<span class="type">int</span> cfd)</span>&#123;</span><br><span class="line">    <span class="comment">// 1. 拆分http请求行   get /xxx/1.jpg http/1.1</span></span><br><span class="line">    <span class="type">char</span> method[<span class="number">12</span>];    <span class="comment">// 方法</span></span><br><span class="line">    <span class="type">char</span> path[<span class="number">1024</span>];    <span class="comment">// 路径</span></span><br><span class="line">    <span class="type">char</span> protocol[<span class="number">12</span>];  <span class="comment">// 协议</span></span><br><span class="line">    <span class="built_in">sscanf</span>(line,<span class="string">&quot;%[^ ] %[^ ] %[^ ]&quot;</span>,method,path,protocol);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;method = %s, path = %s, protocol = %s\n&quot;</span>, method, path, protocol);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否是get请求</span></span><br><span class="line">    <span class="keyword">if</span>(strcasecmp(method,<span class="string">&quot;get&quot;</span>) != <span class="number">0</span>)&#123;     <span class="comment">//不区分大小写</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转码 将不能识别的中文乱码 -&gt; 中文</span></span><br><span class="line">    <span class="comment">// 解码 %23 %34 %5f</span></span><br><span class="line">    decode_str(path, path);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 处理客户端请求的静态资源</span></span><br><span class="line">    <span class="type">char</span>* file = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 如果没有指定访问的资源, 默认显示资源目录中的内容</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(path,<span class="string">&quot;/&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// file的值, 资源目录的当前位置</span></span><br><span class="line">        file = <span class="string">&quot;./&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 去掉path中的/ 获取访问文件名</span></span><br><span class="line">        file = path + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 获取文件属性</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line">    <span class="type">int</span> ret = stat(file,&amp;st);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="comment">// 文件不存在--回复404</span></span><br><span class="line">        sendHeadMsg(cfd,<span class="number">404</span>,<span class="string">&quot;Not Found&quot;</span>,get_file_type(<span class="string">&quot;.html&quot;</span>),<span class="number">-1</span>);</span><br><span class="line">        sendFile(<span class="string">&quot;404.html&quot;</span>,cfd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断文件类型（判断是目录还是文件）</span></span><br><span class="line">    <span class="keyword">if</span>(S_ISDIR(st.st_mode))&#123;    <span class="comment">// 目录</span></span><br><span class="line">        <span class="comment">// 把目录发给客户端</span></span><br><span class="line">         sendHeadMsg(cfd,<span class="number">200</span>,<span class="string">&quot;OK&quot;</span>,get_file_type(<span class="string">&quot;.html&quot;</span>),<span class="number">-1</span>);</span><br><span class="line">         sendDir(file,cfd);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 把文件内容发给客户端</span></span><br><span class="line">        sendHeadMsg(cfd,<span class="number">200</span>,<span class="string">&quot;OK&quot;</span>,get_file_type(file),st.st_size);</span><br><span class="line">        sendFile(file,cfd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sendHeadMsg</span><span class="params">(<span class="type">int</span> cfd,<span class="type">int</span> status,<span class="type">const</span> <span class="type">char</span>* desrc,<span class="type">const</span> <span class="type">char</span>* type,<span class="type">int</span> length)</span>&#123;</span><br><span class="line">    <span class="comment">// 状态行</span></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">4096</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">sprintf</span>(buf,<span class="string">&quot;http/1.1 %d %s \r\n&quot;</span>,status,desrc);</span><br><span class="line">    <span class="comment">// 消息报头</span></span><br><span class="line">    <span class="built_in">sprintf</span>(buf + <span class="built_in">strlen</span>(buf),<span class="string">&quot;Content-Type: %s\r\n&quot;</span>,type);</span><br><span class="line">    <span class="built_in">sprintf</span>(buf + <span class="built_in">strlen</span>(buf),<span class="string">&quot;Content-Length: %d\r\n&quot;</span>,length);</span><br><span class="line"></span><br><span class="line">    send(cfd,buf,<span class="built_in">strlen</span>(buf),<span class="number">0</span>);</span><br><span class="line">     <span class="comment">// 空行</span></span><br><span class="line">    send(cfd, <span class="string">&quot;\r\n&quot;</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sendFile</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename,<span class="type">int</span> cfd)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 打开文件</span></span><br><span class="line">    <span class="type">int</span> fd = open(filename,O_RDONLY);</span><br><span class="line">    assert(fd &gt; <span class="number">0</span>);     <span class="comment">// 断言</span></span><br><span class="line">    <span class="comment">// if(fd == -1)&#123;</span></span><br><span class="line">    <span class="comment">//     perror(&quot;open error&quot;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 2. 循环读文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">4096</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>, ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((len = read(fd,buf,<span class="keyword">sizeof</span>(buf))) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// 发送读出的数据</span></span><br><span class="line">        ret = send(cfd,buf,len,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(errno = EAGAIN)&#123;</span><br><span class="line">                perror(<span class="string">&quot;send error:&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (errno == EINTR) &#123;</span><br><span class="line">                perror(<span class="string">&quot;send error:&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                perror(<span class="string">&quot;send error:&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="type">off_t</span> offset = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> size = lseek(fd,<span class="number">0</span>,SEEK_END);</span><br><span class="line">    lseek(fd,<span class="number">0</span>,SEEK_SET);</span><br><span class="line">    <span class="keyword">while</span>(offset &lt; size)&#123;</span><br><span class="line">        <span class="type">int</span> ret = sendfile(cfd,fd,&amp;offset,size);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ret value: %d\n&quot;</span>,ret);</span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="number">-1</span> &amp;&amp; errno == EAGAIN)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;没数据。。。\n&quot;</span>);</span><br><span class="line">            perror(<span class="string">&quot;snedfile&quot;</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送目录内容</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sendDir</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* dirname, <span class="type">int</span> cfd)</span></span><br><span class="line">&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 拼接一个html页面&lt;table&gt;&lt;/table&gt;</span></span><br><span class="line">   <span class="type">char</span> buf[<span class="number">4096</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">sprintf</span>(buf,<span class="string">&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;目录名：%s&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;table&gt;&quot;</span>,dirname);</span><br><span class="line">   <span class="comment">//sprintf(buf + strlen(buf),&quot;&lt;body&gt;&lt;h1&gt;当前目录：%s&lt;/h1&gt;&lt;table&gt;&quot;,dirname);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 目录项二级指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span>** <span class="title">ptr</span>;</span></span><br><span class="line">    <span class="type">int</span> num = scandir(dirname,&amp;ptr,<span class="literal">NULL</span>,alphasort);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历目录</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">        <span class="comment">// 取出文件名 namelist 指向的是一个指针数组 struct dirent* tmp[]</span></span><br><span class="line">        <span class="type">char</span>* name = ptr[i]-&gt;d_name;</span><br><span class="line">        <span class="type">char</span> subPath[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="comment">// 拼接文件袋完整路径</span></span><br><span class="line">        <span class="built_in">sprintf</span>(subPath,<span class="string">&quot;%s/%s&quot;</span>,dirname,name);</span><br><span class="line">        </span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line">        stat(subPath,&amp;st);</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> enstr[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="comment">// 编码生成 %E5 %A7 之类的东西</span></span><br><span class="line">        encode_str(enstr, <span class="keyword">sizeof</span>(enstr), name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是文件</span></span><br><span class="line">        <span class="keyword">if</span>(S_ISREG(st.st_mode)) &#123;       </span><br><span class="line">            <span class="built_in">sprintf</span>(buf+<span class="built_in">strlen</span>(buf), </span><br><span class="line">                    <span class="string">&quot;&lt;tr&gt;&lt;td&gt;&lt;a href=\&quot;%s\&quot;&gt;%s&lt;/a&gt;&lt;/td&gt;&lt;td&gt;%ld&lt;/td&gt;&lt;/tr&gt;&quot;</span>,</span><br><span class="line">                    enstr, name, (<span class="type">long</span>)st.st_size);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(S_ISDIR(st.st_mode)) &#123;		<span class="comment">// 如果是目录       </span></span><br><span class="line">            <span class="built_in">sprintf</span>(buf+<span class="built_in">strlen</span>(buf), </span><br><span class="line">                    <span class="string">&quot;&lt;tr&gt;&lt;td&gt;&lt;a href=\&quot;%s/\&quot;&gt;%s/&lt;/a&gt;&lt;/td&gt;&lt;td&gt;%ld&lt;/td&gt;&lt;/tr&gt;&quot;</span>,</span><br><span class="line">                    enstr, name, (<span class="type">long</span>)st.st_size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ret = send(cfd, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (errno == EAGAIN) &#123;</span><br><span class="line">                perror(<span class="string">&quot;send error:&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (errno == EINTR) &#123;</span><br><span class="line">                perror(<span class="string">&quot;send error:&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                perror(<span class="string">&quot;send error:&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">        <span class="comment">// 字符串拼接</span></span><br><span class="line">        <span class="built_in">free</span>(ptr[i]);</span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 字符串拼接</span></span><br><span class="line">    <span class="comment">//memset(buf, 0, sizeof(buf));</span></span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">&quot;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    send(cfd, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;dir message send OK!!!!\n&quot;</span>); </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    <span class="comment">// 打开目录</span></span><br><span class="line">    DIR* dir = opendir(dirname);</span><br><span class="line">    <span class="keyword">if</span>(dir == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;opendir error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读目录</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span>* <span class="title">ptr</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>( (ptr = readdir(dir)) != <span class="literal">NULL</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span>* name = ptr-&gt;d_name;</span><br><span class="line">    &#125;</span><br><span class="line">    closedir(dir);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  这里的内容是处理%20之类的东西！是&quot;解码&quot;过程。</span></span><br><span class="line"><span class="comment"> *  %20 URL编码中的‘ ’(space)</span></span><br><span class="line"><span class="comment"> *  %21 &#x27;!&#x27; %22 &#x27;&quot;&#x27; %23 &#x27;#&#x27; %24 &#x27;$&#x27;</span></span><br><span class="line"><span class="comment"> *  %25 &#x27;%&#x27; %26 &#x27;&amp;&#x27; %27 &#x27;&#x27;&#x27; %28 &#x27;(&#x27;......</span></span><br><span class="line"><span class="comment"> *  相关知识html中的‘ ’(space)是&amp;nbsp</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 16进制数转化为10进制</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">hexit</span><span class="params">(<span class="type">char</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;f&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> c - <span class="string">&#x27;a&#x27;</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;F&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> c - <span class="string">&#x27;A&#x27;</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">encode_str</span><span class="params">(<span class="type">char</span>* to, <span class="type">int</span> tosize, <span class="type">const</span> <span class="type">char</span>* from)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tolen;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (tolen = <span class="number">0</span>; *from != <span class="string">&#x27;\0&#x27;</span> &amp;&amp; tolen + <span class="number">4</span> &lt; tosize; ++from) &#123;    </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isalnum</span>(*from) || <span class="built_in">strchr</span>(<span class="string">&quot;/_.-~&quot;</span>, *from) != (<span class="type">char</span>*)<span class="number">0</span>) &#123;      </span><br><span class="line">            *to = *from;</span><br><span class="line">            ++to;</span><br><span class="line">            ++tolen;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">sprintf</span>(to, <span class="string">&quot;%%%02x&quot;</span>, (<span class="type">int</span>) *from &amp; <span class="number">0xff</span>);</span><br><span class="line">            to += <span class="number">3</span>;</span><br><span class="line">            tolen += <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *to = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">decode_str</span><span class="params">(<span class="type">char</span> *to, <span class="type">char</span> *from)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> ( ; *from != <span class="string">&#x27;\0&#x27;</span>; ++to, ++from  ) &#123;     </span><br><span class="line">        <span class="keyword">if</span> (from[<span class="number">0</span>] == <span class="string">&#x27;%&#x27;</span> &amp;&amp; <span class="built_in">isxdigit</span>(from[<span class="number">1</span>]) &amp;&amp; <span class="built_in">isxdigit</span>(from[<span class="number">2</span>])) &#123;       </span><br><span class="line">            *to = hexit(from[<span class="number">1</span>])*<span class="number">16</span> + hexit(from[<span class="number">2</span>]);</span><br><span class="line">            from += <span class="number">2</span>;                      </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            *to = *from;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *to = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过文件名获取文件的类型</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="title function_">get_file_type</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* dot;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自右向左查找‘.’字符, 如不存在返回NULL</span></span><br><span class="line">    dot = <span class="built_in">strrchr</span>(name, <span class="string">&#x27;.&#x27;</span>);   </span><br><span class="line">    <span class="keyword">if</span> (dot == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;text/plain; charset=utf-8&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.html&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(dot, <span class="string">&quot;.htm&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;text/html; charset=utf-8&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.jpg&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(dot, <span class="string">&quot;.jpeg&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;image/jpeg&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.gif&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;image/gif&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.png&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;image/png&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.css&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;text/css&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.au&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;audio/basic&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>( dot, <span class="string">&quot;.wav&quot;</span> ) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;audio/wav&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.avi&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;video/x-msvideo&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.mov&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(dot, <span class="string">&quot;.qt&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;video/quicktime&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.mpeg&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(dot, <span class="string">&quot;.mpe&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;video/mpeg&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.vrml&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(dot, <span class="string">&quot;.wrl&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;model/vrml&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.midi&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(dot, <span class="string">&quot;.mid&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;audio/midi&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.mp3&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;audio/mpeg&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.ogg&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;application/ogg&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dot, <span class="string">&quot;.pac&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;application/x-ns-proxy-autoconfig&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;text/plain; charset=utf-8&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="epoll-web-h"><a href="#epoll-web-h" class="headerlink" title="epoll_web.h"></a><strong>epoll_web.h</strong></h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _EPOLL_SEVER_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _EPOLL_SEVER_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化监听的套接字</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">initListenFd</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> port)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动epoll</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">epollrun</span><span class="params">(<span class="type">int</span> lfd)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立新连接</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">accpetClient</span><span class="params">(<span class="type">int</span> lfd,<span class="type">int</span> epfd)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读数据</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">recvHttpRequest</span><span class="params">(<span class="type">int</span> fd,<span class="type">int</span> epfd)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析请求行</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">parseRequestLine</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* line,<span class="type">int</span> cfd)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送响应头（状态行+响应头）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sendHeadMsg</span><span class="params">(<span class="type">int</span> cfd,<span class="type">int</span> status,<span class="type">const</span> <span class="type">char</span>* desrc,<span class="type">const</span> <span class="type">char</span>* type,<span class="type">int</span> length)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送文件</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sendFile</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename,<span class="type">int</span> cfd)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送目录</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sendDir</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* dirName,<span class="type">int</span> cfd)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过文件名获取文件的类型</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="title function_">get_file_type</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">hexit</span><span class="params">(<span class="type">char</span> c)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">encode_str</span><span class="params">(<span class="type">char</span>* to, <span class="type">int</span> tosize, <span class="type">const</span> <span class="type">char</span>* from)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">decode_str</span><span class="params">(<span class="type">char</span> *to, <span class="type">char</span> *from)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;epoll_web.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;./a.out port path\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 采用指定端口</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> port = atoi(argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改进程工作目录，方便后续操作</span></span><br><span class="line">    <span class="type">int</span> ret = chdir(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;chdir error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化监听套接字</span></span><br><span class="line">    <span class="type">int</span> lfd = initListenFd(port);</span><br><span class="line">    <span class="comment">// 启动epoll模型</span></span><br><span class="line">    epollrun(lfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>网络编程</category>
      </categories>
      <tags>
        <tag>C++ 网络编程 WebServer</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/04/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>腾讯后端开发QQ部门一面</title>
    <url>/2024/04/23/%E8%85%BE%E8%AE%AF%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91QQ%E9%83%A8%E9%97%A8%E4%B8%80%E9%9D%A2/</url>
    <content><![CDATA[<h1 id="腾讯面经"><a href="#腾讯面经" class="headerlink" title="腾讯面经"></a>腾讯面经</h1><h2 id="进程间通信方式"><a href="#进程间通信方式" class="headerlink" title="进程间通信方式"></a>进程间通信方式</h2><ol>
<li><strong>管道（Pipe）：</strong> 管道是一种半双工的通信方式，用于在父进程和子进程之间传递数据。它只能在具有亲缘关系的进程之间使用，例如父子进程或者兄弟进程。管道可以是匿名的，也可以是有名字的。</li>
<li><strong>命名管道（Named Pipe）：</strong> 命名管道是一种特殊的管道，允许在无亲缘关系的进程之间进行通信。它通过文件系统中的特殊文件来实现，具有持久性和独立性的特点。</li>
<li><strong>消息队列（Message Queue）：</strong> 消息队列是一种通过消息传递方式进行进程间通信的机制。它允许一个进程向队列中发送消息，另一个进程从队列中接收消息，实现了异步、解耦合和灵活性的通信方式。</li>
<li><strong>信号量（Semaphore）：</strong> 信号量是一种用于控制多个进程对共享资源的访问的机制。它通过计数器来实现，允许多个进程同时访问共享资源，但可以限制同时访问的进程数量。</li>
<li><strong>共享内存（Shared Memory）：</strong> 共享内存是一种高效的进程间通信方式，允许多个进程共享同一块物理内存区域。它通过将内存映射到进程的地址空间中来实现，使得多个进程可以直接访问共享的数据，而无需进行复制或者传输。</li>
<li><strong>套接字（Socket）：</strong> 套接字是一种用于在网络中进行进程间通信的接口。它允许不同主机上的进程之间通过网络进行数据交换，实现了跨主机的进程通信。</li>
<li><strong>信号（Signal）：</strong> 信号是一种用于通知进程发生了某个事件的机制。它可以在进程之间进行简单的异步通信，例如进程可以通过发送信号来通知另一个进程发生了某个事件，另一个进程可以通过信号处理函数来处理这个事件。</li>
</ol>
<h2 id="tcp三次握手、四次挥手"><a href="#tcp三次握手、四次挥手" class="headerlink" title="tcp三次握手、四次挥手"></a>tcp三次握手、四次挥手</h2><p>一开始，客户端和服务端都处于 <code>CLOSE</code> 状态。先是服务端主动监听某个端口，处于 <code>LISTEN</code> 状态。</p>
<ul>
<li><p>客户端会随机初始化序号（<code>client_isn</code>），将此序号置于 TCP 首部的「序号」字段中，同时把 <code>SYN</code> 标志位置为 <code>1</code>，表示 <code>SYN</code> 报文。接着把第一个 SYN 报文发送给服务端，表示向服务端发起连接，该报文不包含应用层数据，之后客户端处于 <code>SYN-SENT</code> 状态。</p>
</li>
<li><p>服务端收到客户端的 <code>SYN</code> 报文后，首先服务端也随机初始化自己的序号（<code>server_isn</code>），将此序号填入 TCP 首部的「序号」字段中，其次把 TCP 首部的「确认应答号」字段填入 <code>client_isn + 1</code>, 接着把 <code>SYN</code> 和 <code>ACK</code> 标志位置为 <code>1</code>。最后把该报文发给客户端，该报文也不包含应用层数据，之后服务端处于 <code>SYN-RCVD</code> 状态。</p>
</li>
<li><p>客户端收到服务端报文后，还要向服务端回应最后一个应答报文，首先该应答报文 TCP 首部 <code>ACK</code> 标志位置为 <code>1</code> ，其次「确认应答号」字段填入 <code>server_isn + 1</code> ，最后把报文发送给服务端，这次报文可以携带客户到服务端的数据，之后客户端处于 <code>ESTABLISHED</code> 状态。</p>
</li>
<li><p>服务端收到客户端的应答报文后，也进入 <code>ESTABLISHED</code> 状态。</p>
</li>
</ul>
<p>三次握手的<strong>首要原因是为了防止旧的重复连接初始化造成混乱。</strong></p>
<h2 id="protobuf和json的优缺点"><a href="#protobuf和json的优缺点" class="headerlink" title="protobuf和json的优缺点"></a>protobuf和json的优缺点</h2><p><strong>优势</strong></p>
<ul>
<li><strong>极高的效率：</strong> <code>ProtoBuf</code>以二进制格式存储数据，比文本格式的<code>JSON</code>小得多，从而减少了传输时间和存储空间。</li>
<li><strong>强大的数据类型支持：</strong> <code>ProtoBuf</code>支持各种数据类型，包括基本类型、枚举、消息和可重复字段，使其非常适合处理复杂的数据结构；<strong>无类型</strong>：<code>JSON</code>是一种无类型的数据格式，因此在数据校验和一致性方面不如<code>protobuf</code>。</li>
<li><strong>强大的序列化和反序列化性能：</strong> <code>ProtoBuf</code>提供了高效的序列化和反序列化库，可以快速将数据转换为二进制格式，并在需要时将其转换回原始对象。</li>
</ul>
<p><strong>劣势</strong></p>
<ul>
<li><strong>语言无关性：</strong> <code>JSON</code>是一种语言无关的数据格式，可以轻松地与各种编程语言集成。</li>
<li><strong>可读性差</strong>：由于是二进制格式，不易人类阅读和调试。<code>JSON</code>是一种文本格式，易于人类阅读和编写。</li>
</ul>
<h2 id="异步日志为什么要用单例模式"><a href="#异步日志为什么要用单例模式" class="headerlink" title="异步日志为什么要用单例模式"></a>异步日志为什么要用单例模式</h2><ol>
<li><strong>全局唯一性：</strong> 异步日志通常需要在整个程序中被访问和使用，因此需要确保日志实例的全局唯一性，以避免多个日志实例之间的冲突和混乱。单例模式确保了在整个程序中只有一个日志实例存在。</li>
<li><strong>方便访问：</strong> 使用单例模式可以通过静态方法或者全局函数来获取日志实例，从而方便在程序的任何地方使用相同的日志实例进行记录，而无需传递日志实例的引用。</li>
<li><strong>线程安全性：</strong> 异步日志通常会在多个线程中被同时使用，因此需要考虑线程安全性。单例模式可以在实现时考虑线程安全性，并确保日志实例的创建和访问都是线程安全的。</li>
</ol>
<h2 id="static修饰的变量和全局变量有什么区别"><a href="#static修饰的变量和全局变量有什么区别" class="headerlink" title="static修饰的变量和全局变量有什么区别"></a>static修饰的变量和全局变量有什么区别</h2><ol>
<li><strong>作用域</strong>:<ul>
<li>全局变量在整个程序中都是可见的，可以被任何函数访问。</li>
<li><code>static</code>修饰的变量只在定义它的函数内部可见，其作用域被限制在定义它的函数内部。</li>
</ul>
</li>
<li><strong>生存周期</strong>:<ul>
<li>全局变量在程序运行期间始终存在，直到程序结束。</li>
<li><code>static</code>修饰的变量也在程序运行期间存在，但其生命周期与程序中对应的函数调用有关。当包含<code>static</code>变量的函数执行完毕时，<code>static</code>变量仍然存在，但其值会保持上一次函数调用结束时的状态。</li>
</ul>
</li>
<li><strong>存储位置</strong>:<ul>
<li>全局变量存储在静态存储区，程序在启动时就会为全局变量分配内存。</li>
<li><code>static</code>修饰的变量也存储在静态存储区，但只有在<strong>其所在的函数第一次被调用时才会分配内存</strong>。</li>
</ul>
</li>
<li><strong>访问权限</strong>:<ul>
<li>全局变量可以被程序中的任何函数访问。</li>
<li><code>static</code>修饰的变量只能被定义它的函数访问，其他函数无法直接访问该变量。</li>
</ul>
</li>
</ol>
<h2 id="epoll的底层原理"><a href="#epoll的底层原理" class="headerlink" title="epoll的底层原理"></a>epoll的底层原理</h2><p><code>epoll</code> 是 Linux 下的一种 I&#x2F;O 多路复用机制，用于处理大量并发连接或操作。它通过操作系统内核提供的 <code>epoll</code> 系统调用来管理文件描述符并监视 I&#x2F;O 事件。</p>
<ol>
<li><strong>事件驱动模型：</strong> <code>epoll</code> 是基于<strong>事件驱动</strong>的模型。它利用操作系统内核的事件通知机制来通知应用程序发生了哪些 I&#x2F;O 事件，例如套接字可读、套接字可写等。</li>
<li><strong>注册事件：</strong> 应用程序可以通过 <code>epoll_ctl</code> 系统调用向内核注册需要监视的文件描述符以及对应的事件类型（读、写等）。一旦文件描述符上发生了指定的事件，内核就会通知应用程序。</li>
<li><strong>等待事件：</strong> 应用程序使用 <code>epoll_wait</code> 系统调用来等待事件的发生。当有文件描述符上发生了注册的事件时，<code>epoll_wait</code> 将返回并通知应用程序。</li>
<li><strong>高效处理事件：</strong> <code>epoll</code> 的高效性体现在它在等待事件发生时不会阻塞整个进程，而是采用了非阻塞的方式。它通过内核态和用户态之间的数据结构共享，避免了频繁的上下文切换，从而提高了性能。</li>
<li><strong>可扩展性：</strong> <code>epoll</code> 在设计上考虑了可扩展性，能够有效地处理大量的并发连接或操作。它使用红黑树（Red-Black Tree）和双链表（Doubly Linked List）等数据结构来管理文件描述符，从而减少了对文件描述符数量的限制。</li>
</ol>
<h2 id="什么情况下需要I-O多路复用技术"><a href="#什么情况下需要I-O多路复用技术" class="headerlink" title="什么情况下需要I&#x2F;O多路复用技术"></a>什么情况下需要I&#x2F;O多路复用技术</h2><p>传统的 I&#x2F;O 模型中，每个连接或操作都需要一个独立的线程或进程来处理，这会消耗大量的系统资源。而使用 I&#x2F;O 多路复用技术，可以通过一个线程或进程同时监听多个 I&#x2F;O 事件，从而减少了资源的消耗。</p>
<p><strong>IO多路复用是指使用一个线程来检查多个文件描述符（Socket）的就绪状态</strong>，比如调用select和poll函数，传入多个文件描述符，<strong>如果有一个文件描述符就绪，则返回，否则阻塞直到超时</strong>。</p>
<p>这样在处理1000个连接时，<strong>只需要1个线程监控就绪状态，对就绪的每个连接开一个线程处理就可以了，这样需要的线程数大大减少，减少了内存开销和上下文切换的CPU开销。</strong></p>
<h2 id="tcp三次握手期间，ddos攻击"><a href="#tcp三次握手期间，ddos攻击" class="headerlink" title="tcp三次握手期间，ddos攻击"></a>tcp三次握手期间，ddos攻击</h2><p>“分布式拒绝服务”，即利用大量合法的分布式服务器对目标发送请求，从而导致正常合法用户无法获得服务。</p>
<p>通过发送伪造源<code>IP</code>的TCP数据包发送<code>SYN</code>或<code>ACK</code>包、发送包含错误设置的地址值等攻击方式，<strong>耗尽服务器资源，导致服务器拒绝访问</strong>。</p>
<h2 id="在没有IO多路复用的时候，早年的网络服务器，如PHP写的他们是怎么处理连接的，采用什么技术"><a href="#在没有IO多路复用的时候，早年的网络服务器，如PHP写的他们是怎么处理连接的，采用什么技术" class="headerlink" title="在没有IO多路复用的时候，早年的网络服务器，如PHP写的他们是怎么处理连接的，采用什么技术"></a>在没有IO多路复用的时候，早年的网络服务器，如PHP写的他们是怎么处理连接的，采用什么技术</h2><p><strong>多进程&#x2F;多线程模型：</strong> 服务器启动时创建多个进程或线程来处理连接。每个连接都被分配给一个独立的进程或线程来处理，这样可以同时处理多个连接。</p>
<p><strong>阻塞式 I&#x2F;O：</strong>当有新连接到来时，服务器将为其分配一个进程或线程，并在该进程或线程中使用阻塞式 I&#x2F;O 来处理连接。</p>
<p><strong>进程池&#x2F;线程池：</strong> 为了避免频繁地创建和销毁进程或线程带来的开销，服务器可能会使用进程池或线程池来管理连接处理的进程或线程。</p>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">getNext</span><span class="params">(<span class="type">const</span> string &amp;T, vector&lt;<span class="type">int</span>&gt; &amp;next)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">	next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; T.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">		<span class="keyword">while</span>(j != <span class="number">0</span> &amp;&amp; T[i] != T[j])&#123;</span><br><span class="line">            <span class="comment">// 找前一位的对应的回退位置</span></span><br><span class="line">			j = next[j<span class="number">-1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(s[i] == s[j])&#123;</span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">		next[i] = j;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">KMP</span><span class="params">(string &amp;S ,string &amp;T)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = S.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> m = T.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">next</span><span class="params">(m,<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="built_in">getNext</span>(T,next);</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; S[i] != T[j])&#123;</span><br><span class="line">            j = next[j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(S[i] == T[j])&#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j == m)&#123;</span><br><span class="line">            <span class="keyword">return</span> (i - m + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h2><h2 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h2><h2 id="top-K"><a href="#top-K" class="headerlink" title="top K"></a>top K</h2>]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>后端开发 C++</tag>
      </tags>
  </entry>
</search>
